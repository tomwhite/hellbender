From 717a6b989501de4df698af0a269d58609595738e Mon Sep 17 00:00:00 2001
From: vruano <valentin.ruano@gmail.com>
Date: Fri, 31 Mar 2017 18:09:31 -0400
Subject: [PATCH] Allow the use of the SparkSharder with vcf containing very
 long variant entries

---
 .../hellbender/engine/spark/SparkSharder.java      |  42 +++++---
 .../engine/spark/SparkSharderUnitTest.java         |   2 +-
 ...ExampleAssemblyRegionWalkerIntegrationTest.java |   2 +
 .../ExampleVariantWalkerSparkIntegrationTest.java  |  15 ++-
 .../tools/examples/input_long_variants.vcf         | 109 +++++++++++++++++++++
 5 files changed, 157 insertions(+), 13 deletions(-)
 create mode 100644 src/test/resources/org/broadinstitute/hellbender/tools/examples/input_long_variants.vcf

diff --git a/src/main/java/org/broadinstitute/hellbender/engine/spark/SparkSharder.java b/src/main/java/org/broadinstitute/hellbender/engine/spark/SparkSharder.java
index 2dfc94a68..f651696a6 100644
--- a/src/main/java/org/broadinstitute/hellbender/engine/spark/SparkSharder.java
+++ b/src/main/java/org/broadinstitute/hellbender/engine/spark/SparkSharder.java
@@ -19,7 +19,6 @@ import org.apache.spark.rdd.RDD;
 import org.broadinstitute.hellbender.engine.Shard;
 import org.broadinstitute.hellbender.engine.ShardBoundary;
 import org.broadinstitute.hellbender.engine.ShardBoundaryShard;
-import org.broadinstitute.hellbender.exceptions.UserException;
 import org.broadinstitute.hellbender.utils.SimpleInterval;
 import org.broadinstitute.hellbender.utils.Utils;
 import scala.Option;
@@ -125,7 +124,7 @@ public class SparkSharder {
                                                                                             SAMSequenceDictionary sequenceDictionary, List<I> intervals,
                                                                                             int maxLocatableLength, MapFunction<Tuple2<I, Iterable<L>>, T> f) {
         return joinOverlapping(ctx, locatables, locatableClass, sequenceDictionary, intervals, maxLocatableLength,
-                (FlatMapFunction2<Iterator<L>, Iterator<I>, T>) (locatablesIterator, shardsIterator) -> Iterators.transform(locatablesPerShard(locatablesIterator, shardsIterator, sequenceDictionary, maxLocatableLength), new Function<Tuple2<I,Iterable<L>>, T>() {
+                (FlatMapFunction2<Iterator<L>, Iterator<I>, T>) (locatablesIterator, shardsIterator) -> Iterators.transform(locatablesPerShard(locatablesIterator, shardsIterator, sequenceDictionary), new Function<Tuple2<I,Iterable<L>>, T>() {
                     @Nullable
                     @Override
                     public T apply(@Nullable Tuple2<I, Iterable<L>> input) {
@@ -204,7 +203,7 @@ public class SparkSharder {
      * Turn a pair of iterators over intervals and locatables, into a single iterator over pairs made up of an interval and
      * the locatables that overlap it. Intervals with no overlapping locatables are dropped.
      */
-    static <L extends Locatable, I extends Locatable> Iterator<Tuple2<I, Iterable<L>>> locatablesPerShard(Iterator<L> locatables, Iterator<I> shards, SAMSequenceDictionary sequenceDictionary, int maxLocatableLength) {
+    static <L extends Locatable, I extends Locatable> Iterator<Tuple2<I, Iterable<L>>> locatablesPerShard(Iterator<L> locatables, Iterator<I> shards, SAMSequenceDictionary sequenceDictionary) {
         if (!shards.hasNext()) {
             return Collections.emptyIterator();
         }
@@ -214,6 +213,7 @@ public class SparkSharder {
             // keep track of current and next, since locatables can overlap two shards
             I currentShard = peekingShards.next();
             I nextShard = peekingShards.hasNext() ? peekingShards.next() : null;
+            List<L> overhangingLocatables = Lists.newArrayList();
             List<L> currentLocatables = Lists.newArrayList();
             List<L> nextLocatables = Lists.newArrayList();
 
@@ -226,18 +226,16 @@ public class SparkSharder {
                     if (toRightOf(currentShard, peekingLocatables.peek(), sequenceDictionary)) {
                         break;
                     }
-                    L locatable = peekingLocatables.next();
-                    if (locatable.getContig() != null) {
-                        int size = locatable.getEnd() - locatable.getStart() + 1;
-                        if (size > maxLocatableLength) {
-                            throw new UserException(String.format("Max size of locatable exceeded. Max size is %s, but locatable size is %s. Try increasing shard size and/or padding. Locatable: %s", maxLocatableLength, size, locatable));
-                        }
-                    }
+                    final L locatable = peekingLocatables.next();
                     if (overlaps(currentShard, locatable)) {
                         currentLocatables.add(locatable);
                     }
                     if (nextShard != null && overlaps(nextShard, locatable)) {
+                        // we are certain that no following shard would start before the nextShard start.
                         nextLocatables.add(locatable);
+                        if (locatable.getEnd() >= nextShard.getStart()) {
+                            overhangingLocatables.add(locatable);
+                        }
                     }
                 }
                 // current shard is finished, either because the current locatable is to the right of it, or there are no more locatables
@@ -245,9 +243,31 @@ public class SparkSharder {
                 currentShard = nextShard;
                 nextShard = peekingShards.hasNext() ? peekingShards.next() : null;
                 currentLocatables = nextLocatables;
-                nextLocatables = Lists.newArrayList();
+                nextLocatables = updateOverhangingLocatables();
                 return tuple;
             }
+
+            private List<L> updateOverhangingLocatables() {
+                final List<L> result = Lists.newArrayList();
+                if (nextShard != null && !overhangingLocatables.isEmpty()) {
+                    final Iterator<L> it = overhangingLocatables.iterator();
+                    while (it.hasNext()) {
+                        final L oversizedLocatable = it.next();
+                        if (!Objects.equals(oversizedLocatable.getContig(), nextShard.getContig())) { // nextShard is on a different chromosome.
+                            overhangingLocatables.clear();
+                            break;
+                        } else if (nextShard.getStart() > oversizedLocatable.getEnd()) {
+                            it.remove();
+                        } else {
+                            result.add(oversizedLocatable);
+                            if (oversizedLocatable.getEnd() < nextShard.getStart()) { // we are certain that no following shard would start before the nextShard start.
+                                it.remove();
+                            }
+                        }
+                    }
+                }
+                return result;
+            }
         };
         return Iterators.filter(iterator, input -> input._2().iterator().hasNext());
     }
diff --git a/src/test/java/org/broadinstitute/hellbender/engine/spark/SparkSharderUnitTest.java b/src/test/java/org/broadinstitute/hellbender/engine/spark/SparkSharderUnitTest.java
index c3e2aa476..4a9229fbb 100644
--- a/src/test/java/org/broadinstitute/hellbender/engine/spark/SparkSharderUnitTest.java
+++ b/src/test/java/org/broadinstitute/hellbender/engine/spark/SparkSharderUnitTest.java
@@ -91,7 +91,7 @@ public class SparkSharderUnitTest extends BaseTest implements Serializable {
                 new SimpleInterval("1", 8, 12),
                 new SimpleInterval("1", 11, 22));
 
-        Iterator<Tuple2<SimpleInterval, Iterable<TestRead>>> it = SparkSharder.locatablesPerShard(reads.iterator(), intervals.iterator(), sequenceDictionary, STANDARD_READ_LENGTH);
+        Iterator<Tuple2<SimpleInterval, Iterable<TestRead>>> it = SparkSharder.locatablesPerShard(reads.iterator(), intervals.iterator(), sequenceDictionary);
         assertTrue(it.hasNext());
         Tuple2<SimpleInterval, Iterable<TestRead>> next = it.next();
         assertEquals(next._1(), intervals.get(0));
diff --git a/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalkerIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalkerIntegrationTest.java
index 064917e33..2efda561b 100644
--- a/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalkerIntegrationTest.java
+++ b/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleAssemblyRegionWalkerIntegrationTest.java
@@ -4,7 +4,9 @@ import org.broadinstitute.hellbender.CommandLineProgramTest;
 import org.broadinstitute.hellbender.utils.test.IntegrationTestSpec;
 import org.testng.annotations.Test;
 
+import java.io.File;
 import java.util.Arrays;
+import java.util.Collections;
 
 public class ExampleAssemblyRegionWalkerIntegrationTest extends CommandLineProgramTest {
     private static final String TEST_OUTPUT_DIRECTORY = publicTestDir + "org/broadinstitute/hellbender/tools/examples/";
diff --git a/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleVariantWalkerSparkIntegrationTest.java b/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleVariantWalkerSparkIntegrationTest.java
index 170b16306..d1d7ad1fc 100644
--- a/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleVariantWalkerSparkIntegrationTest.java
+++ b/src/test/java/org/broadinstitute/hellbender/tools/examples/ExampleVariantWalkerSparkIntegrationTest.java
@@ -3,10 +3,12 @@ package org.broadinstitute.hellbender.tools.examples;
 import org.broadinstitute.hellbender.CommandLineProgramTest;
 import org.broadinstitute.hellbender.utils.test.ArgumentsBuilder;
 import org.broadinstitute.hellbender.utils.test.IntegrationTestSpec;
+import org.testng.Assert;
 import org.testng.annotations.Test;
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Collections;
 
 public final class ExampleVariantWalkerSparkIntegrationTest extends CommandLineProgramTest {
 
@@ -33,5 +35,16 @@ public final class ExampleVariantWalkerSparkIntegrationTest extends CommandLineP
         File expected = new File(TEST_OUTPUT_DIRECTORY, "expected_ExampleVariantWalkerSparkIntegrationTest_output.txt");
         IntegrationTestSpec.assertEqualTextFiles(new File(out, "part-00000"), expected);
     }
-
+    
+    @Test
+    public void testLongVariants() throws Exception {
+        final File testOutput = createTempFile("output", ".txt");
+        testOutput.delete();
+        IntegrationTestSpec testSpec = new IntegrationTestSpec(
+                        " -V " + TEST_OUTPUT_DIRECTORY + "input_long_variants.vcf" +
+                        " -O " + testOutput, Collections.emptyList()
+        );
+        testSpec.executeTest("testExampleAssemblyRegionWalker", this);
+        Assert.assertTrue(testOutput.exists());
+    }
 }
diff --git a/src/test/resources/org/broadinstitute/hellbender/tools/examples/input_long_variants.vcf b/src/test/resources/org/broadinstitute/hellbender/tools/examples/input_long_variants.vcf
new file mode 100644
index 000000000..bde727560
--- /dev/null
+++ b/src/test/resources/org/broadinstitute/hellbender/tools/examples/input_long_variants.vcf
@@ -0,0 +1,109 @@
+##fileformat=VCFv4.2
+##INFO=<ID=ALIGN_LENGTHS,Number=.,Type=Integer,Description="Minimum lengths of the flanking aligned region from each contig alignment">
+##INFO=<ID=ASSEMBLY_IDS,Number=.,Type=String,Description="IDs of the assemblies that produced each contig alignment">
+##INFO=<ID=CONTIG_IDS,Number=.,Type=String,Description="IDs of the contigs that produced each alignment">
+##INFO=<ID=DUPLICATED_SEQUENCE,Number=1,Type=String,Description="Duplicated sequence on the reference or on the alternate allele">
+##INFO=<ID=DUP_NUM,Number=R,Type=Integer,Description="Number of times the sequence is duplicated on reference and on the alternate alleles">
+##INFO=<ID=END,Number=1,Type=Integer,Description="Stop position of the interval">
+##INFO=<ID=EXPANSION,Number=0,Type=Flag,Description="Stop position of the interval">
+##INFO=<ID=CONTRACTION,Number=0,Type=Flag,Description="Stop position of the interval">
+##INFO=<ID=HOMOLOGY,Number=.,Type=String,Description="Homologous sequence from contig at the breakpoint">
+##INFO=<ID=HOMOLOGY_LENGTH,Number=1,Type=Integer,Description="Length of homologous sequence">
+##INFO=<ID=HQ_MAPPINGS,Number=1,Type=Integer,Description="Number of high-quality contig alignments that support the variant">
+##INFO=<ID=INSERTED_SEQUENCE,Number=.,Type=String,Description="Inserted sequence at the breakpoint">
+##INFO=<ID=INSERTED_SEQUENCE_MAPPINGS,Number=.,Type=String,Description="Alignments of inserted sequence">
+##INFO=<ID=INV33,Number=0,Type=Flag,Description="Whether the event represents a 3' to 5' inversion">
+##INFO=<ID=INV55,Number=0,Type=Flag,Description="Whether the event represents a 5' to 3' inversion">
+##INFO=<ID=MAPPING_QUALITIES,Number=.,Type=Integer,Description="Mapping qualities of the contig alignments that support the variant">
+##INFO=<ID=MAX_ALIGN_LENGTH,Number=1,Type=Integer,Description="Maximum of the minimum aligned lengths of flanking regions from each contig alignment">
+##INFO=<ID=SVLEN,Number=.,Type=Integer,Description="Difference in length between REF and ALT alleles">
+##INFO=<ID=SVTYPE,Number=1,Type=String,Description="Type of structural variant">
+##INFO=<ID=TOTAL_MAPPINGS,Number=1,Type=Integer,Description="Number of contig alignments that support the variant">
+##contig=<ID=1,length=249250621,assembly=GRCh37>
+##contig=<ID=2,length=243199373,assembly=GRCh37>
+##contig=<ID=3,length=198022430,assembly=GRCh37>
+##contig=<ID=4,length=191154276,assembly=GRCh37>
+##contig=<ID=5,length=180915260,assembly=GRCh37>
+##contig=<ID=6,length=171115067,assembly=GRCh37>
+##contig=<ID=7,length=159138663,assembly=GRCh37>
+##contig=<ID=8,length=146364022,assembly=GRCh37>
+##contig=<ID=9,length=141213431,assembly=GRCh37>
+##contig=<ID=10,length=135534747,assembly=GRCh37>
+##contig=<ID=11,length=135006516,assembly=GRCh37>
+##contig=<ID=12,length=133851895,assembly=GRCh37>
+##contig=<ID=13,length=115169878,assembly=GRCh37>
+##contig=<ID=14,length=107349540,assembly=GRCh37>
+##contig=<ID=15,length=102531392,assembly=GRCh37>
+##contig=<ID=16,length=90354753,assembly=GRCh37>
+##contig=<ID=17,length=81195210,assembly=GRCh37>
+##contig=<ID=18,length=78077248,assembly=GRCh37>
+##contig=<ID=19,length=59128983,assembly=GRCh37>
+##contig=<ID=20,length=63025520,assembly=GRCh37>
+##contig=<ID=21,length=48129895,assembly=GRCh37>
+##contig=<ID=22,length=51304566,assembly=GRCh37>
+##contig=<ID=X,length=155270560,assembly=GRCh37>
+##contig=<ID=Y,length=59373566,assembly=GRCh37>
+##contig=<ID=MT,length=16569,assembly=GRCh37>
+##contig=<ID=GL000207.1,length=4262,assembly=GRCh37>
+##contig=<ID=GL000226.1,length=15008,assembly=GRCh37>
+##contig=<ID=GL000229.1,length=19913,assembly=GRCh37>
+##contig=<ID=GL000231.1,length=27386,assembly=GRCh37>
+##contig=<ID=GL000210.1,length=27682,assembly=GRCh37>
+##contig=<ID=GL000239.1,length=33824,assembly=GRCh37>
+##contig=<ID=GL000235.1,length=34474,assembly=GRCh37>
+##contig=<ID=GL000201.1,length=36148,assembly=GRCh37>
+##contig=<ID=GL000247.1,length=36422,assembly=GRCh37>
+##contig=<ID=GL000245.1,length=36651,assembly=GRCh37>
+##contig=<ID=GL000197.1,length=37175,assembly=GRCh37>
+##contig=<ID=GL000203.1,length=37498,assembly=GRCh37>
+##contig=<ID=GL000246.1,length=38154,assembly=GRCh37>
+##contig=<ID=GL000249.1,length=38502,assembly=GRCh37>
+##contig=<ID=GL000196.1,length=38914,assembly=GRCh37>
+##contig=<ID=GL000248.1,length=39786,assembly=GRCh37>
+##contig=<ID=GL000244.1,length=39929,assembly=GRCh37>
+##contig=<ID=GL000238.1,length=39939,assembly=GRCh37>
+##contig=<ID=GL000202.1,length=40103,assembly=GRCh37>
+##contig=<ID=GL000234.1,length=40531,assembly=GRCh37>
+##contig=<ID=GL000232.1,length=40652,assembly=GRCh37>
+##contig=<ID=GL000206.1,length=41001,assembly=GRCh37>
+##contig=<ID=GL000240.1,length=41933,assembly=GRCh37>
+##contig=<ID=GL000236.1,length=41934,assembly=GRCh37>
+##contig=<ID=GL000241.1,length=42152,assembly=GRCh37>
+##contig=<ID=GL000243.1,length=43341,assembly=GRCh37>
+##contig=<ID=GL000242.1,length=43523,assembly=GRCh37>
+##contig=<ID=GL000230.1,length=43691,assembly=GRCh37>
+##contig=<ID=GL000237.1,length=45867,assembly=GRCh37>
+##contig=<ID=GL000233.1,length=45941,assembly=GRCh37>
+##contig=<ID=GL000204.1,length=81310,assembly=GRCh37>
+##contig=<ID=GL000198.1,length=90085,assembly=GRCh37>
+##contig=<ID=GL000208.1,length=92689,assembly=GRCh37>
+##contig=<ID=GL000191.1,length=106433,assembly=GRCh37>
+##contig=<ID=GL000227.1,length=128374,assembly=GRCh37>
+##contig=<ID=GL000228.1,length=129120,assembly=GRCh37>
+##contig=<ID=GL000214.1,length=137718,assembly=GRCh37>
+##contig=<ID=GL000221.1,length=155397,assembly=GRCh37>
+##contig=<ID=GL000209.1,length=159169,assembly=GRCh37>
+##contig=<ID=GL000218.1,length=161147,assembly=GRCh37>
+##contig=<ID=GL000220.1,length=161802,assembly=GRCh37>
+##contig=<ID=GL000213.1,length=164239,assembly=GRCh37>
+##contig=<ID=GL000211.1,length=166566,assembly=GRCh37>
+##contig=<ID=GL000199.1,length=169874,assembly=GRCh37>
+##contig=<ID=GL000217.1,length=172149,assembly=GRCh37>
+##contig=<ID=GL000216.1,length=172294,assembly=GRCh37>
+##contig=<ID=GL000215.1,length=172545,assembly=GRCh37>
+##contig=<ID=GL000205.1,length=174588,assembly=GRCh37>
+##contig=<ID=GL000219.1,length=179198,assembly=GRCh37>
+##contig=<ID=GL000224.1,length=179693,assembly=GRCh37>
+##contig=<ID=GL000223.1,length=180455,assembly=GRCh37>
+##contig=<ID=GL000195.1,length=182896,assembly=GRCh37>
+##contig=<ID=GL000212.1,length=186858,assembly=GRCh37>
+##contig=<ID=GL000222.1,length=186861,assembly=GRCh37>
+##contig=<ID=GL000200.1,length=187035,assembly=GRCh37>
+##contig=<ID=GL000193.1,length=189789,assembly=GRCh37>
+##contig=<ID=GL000194.1,length=191469,assembly=GRCh37>
+##contig=<ID=GL000225.1,length=211173,assembly=GRCh37>
+##contig=<ID=GL000192.1,length=547496,assembly=GRCh37>
+##contig=<ID=NC_007605,length=171823,assembly=NC_007605.1>
+#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO
+1	29721370	INV55_1_29721370_30878962	C	<INV>	.	.	ALIGN_LENGTHS=144;ASSEMBLY_IDS=276;CONTIG_IDS=contig-5;END=30878962;HQ_MAPPINGS=1;INSERTED_SEQUENCE=AAACCAGGCCCCAGGGCCCCAGAAAGCAGGTAGTAGGGCCAAGCGAGGGCCGGGGCAGGCTAGCTCCAAGCCCACTGCAGGCCTCAGCTCTGCT;INV55;MAPPING_QUALITIES=60;MAX_ALIGN_LENGTH=144;SVLEN=1157592;SVTYPE=INV;TOTAL_MAPPINGS=1
+1	35101421	DEL_1_35101421_35111976	A	<DEL>	.	.	ALIGN_LENGTHS=126;ASSEMBLY_IDS=321;CONTIG_IDS=contig-8;END=35111976;HOMOLOGY=T;HOMOLOGY_LENGTH=1;HQ_MAPPINGS=1;MAPPING_QUALITIES=60;MAX_ALIGN_LENGTH=126;SVLEN=-10555;SVTYPE=DEL;TOTAL_MAPPINGS=1
-- 
2.14.3 (Apple Git-98)

